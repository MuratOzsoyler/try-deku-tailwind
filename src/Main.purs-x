module Main
  ( main
  ) where

import Prelude

import Control.Monad.Maybe.Trans (MaybeT(..), runMaybeT)
import Control.Monad.ST.Class (liftST)
import Control.Monad.ST.Global (toEffect)
import Control.Plus (empty)
import Data.Foldable (for_, oneOf, traverse_)
import Data.Maybe (Maybe(..))
import Data.Traversable (for, traverse)
import Data.Tuple.Nested ((/\))
import Deku.Core (fixed)
import Deku.DOM.Attributes as DA
import Deku.DOM.Listeners as DL
import Deku.DOM.SVG as DS
import Deku.DOM.SVG.Attributes as DSA
import Deku.DOM.Self as DA
import Deku.Do as Deku
import Deku.Effect as DE
import Deku.Hooks (useState, useState')
import Deku.Pursx ((~~))
import Deku.Toplevel (runInBody)
import Effect (Effect)
import Effect.Class (liftEffect)
import Effect.Class.Console as Console
import Effect.Console (log)
import FRP.Event (bindToEffect)
import FRP.Event as Event
import FRP.Event.Class ((<|*>))
import FRP.Poll (dredge)
import FRP.Poll as Poll
import Partial.Unsafe (unsafePartial)
import Type.Proxy (Proxy(..))
import Web.CSSOM as CSSOM
import Web.CSSOM.CSSStyleDeclaration as CSSStyle
import Web.CSSOM.ElementCSSInlineStyle as CSSInline
import Web.CSSOMView.MediaQueryList as CSSOMView.MQL
import Web.CSSOMView.MediaQueryListEvent as CSSOMView
import Web.CSSOMView.Window as CSSOMView
import Web.DOM (Document)
import Web.DOM.DOMTokenList as DOMTokenList
import Web.DOM.Element as DOMElement
import Web.DOM.Element as Element
import Web.DOM.MutationObserver (mutationObserver)
import Web.DOM.MutationObserver as MutationObserver
import Web.DOM.MutationRecord (MutationRecord, MutationRecordType(..))
import Web.DOM.MutationRecord as MutationReceord
import Web.DOM.MutationRecord as MutationRecord
import Web.DOM.Node as Node
import Web.DOM.NodeType as NodeType
import Web.DOM.NonElementParentNode as NonElementParentNode
import Web.DOM.StyleSheetList as StyleSheetList
import Web.Dom.Element.Extra as ElementExtra
import Web.Event.EventTarget (eventListener)
import Web.HTML (HTMLElement, window)
import Web.HTML as Web
import Web.HTML.HTMLBodyElement as HTMLBody
import Web.HTML.HTMLDocument as HTMLDocument
import Web.HTML.HTMLElement as HTMLElement
import Web.HTML.HTMLUListElement as HTMLUList
import Web.HTML.Window as Window
import Web.ResizeObserver (ResizeObserverBoxOptions(..), observe, resizeObserver)

main :: Effect Unit
main = do
  log "üçù"
  mql <- CSSOMView.matchMedia "min-width:1024px" =<< window
  initTreshold <- CSSOMView.MQL.matches mql
  _ /\ pushTreshold /\ treshold <- toEffect $ DE.useHot initTreshold
  flip CSSOMView.MQL.addListener mql =<< eventListener \_ -> do
    Console.log "treshold"
    pushTreshold =<< CSSOMView.MQL.matches mql
  pushResize /\ resize <- toEffect DE.useState' --  toEffect Poll.create
  robserver <- resizeObserver \_ _ -> pushResize unit
  document <- window >>= Window.document
  let parNode = HTMLDocument.toParentNode document
  HTMLDocument.body document <#> map HTMLElement.toElement
    >>= traverse_ \elem -> observe elem { box: ContentBox } robserver
  runInBody Deku.do
    setMenuElem /\ menuElem <- useState'
    setMenuStyle /\ menuStyle <- useState ""
    -- setMenuVisible /\ menuVisible <- useState'
    let
      appMenuHidden = resize # Poll.dredge
        ( flip Event.bindToEffect \_ ->
            do
              let ne = HTMLDocument.toNonElementParentNode document
              runMaybeT do
                elem <- MaybeT $ NonElementParentNode.getElementById "app-menu" ne
                htmlElem <- MaybeT $ pure $ HTMLElement.fromElement elem
                css <- pure $ CSSInline.fromHTMLElement htmlElem
                style <- liftEffect $ CSSInline.style css
                display <- liftEffect $ CSSStyle.getPropertyValue "display" style
                Console.debug $ "app-menu display value=" <> show display
                -- setMenuVisible $ display /= "none"
                pure $ display /= "none"
              >>= pure <<< case _ of
                Nothing -> false
                Just b -> b
        )
    pursx ~~
      { iconPaths: fixed
          [ DS.path [ DSA.d_ "M27.912 7.289l-10.324-5.961c-0.455-0.268-1.002-0.425-1.588-0.425s-1.133 0.158-1.604 0.433l0.015-0.008-10.324 5.961c-0.955 0.561-1.586 1.582-1.588 2.75v11.922c0.002 1.168 0.635 2.189 1.574 2.742l0.016 0.008 10.322 5.961c0.455 0.267 1.004 0.425 1.59 0.425 0.584 0 1.131-0.158 1.602-0.433l-0.014 0.008 10.322-5.961c0.955-0.561 1.586-1.582 1.588-2.75v-11.922c-0.002-1.168-0.633-2.189-1.573-2.742zM27.383 21.961c0 0.389-0.211 0.73-0.526 0.914l-0.004 0.002-10.324 5.961c-0.152 0.088-0.334 0.142-0.53 0.142s-0.377-0.053-0.535-0.145l0.005 0.002-10.324-5.961c-0.319-0.186-0.529-0.527-0.529-0.916v-11.922c0-0.389 0.211-0.73 0.526-0.914l0.004-0.002 10.324-5.961c0.152-0.090 0.334-0.143 0.53-0.143s0.377 0.053 0.535 0.144l-0.006-0.002 10.324 5.961c0.319 0.185 0.529 0.527 0.529 0.916z" ] []
          , DS.path [ DSA.d_ "M22.094 19.451h-0.758c-0.188 0-0.363 0.049-0.515 0.135l0.006-0.004-4.574 2.512-5.282-3.049v-6.082l5.282-3.051 4.576 2.504c0.146 0.082 0.323 0.131 0.508 0.131h0.758c0.293 0 0.529-0.239 0.529-0.531v-0.716c0-0.2-0.11-0.373-0.271-0.463l-0.004-0.002-5.078-2.777c-0.293-0.164-0.645-0.26-1.015-0.26-0.39 0-0.756 0.106-1.070 0.289l0.010-0.006-5.281 3.049c-0.636 0.375-1.056 1.055-1.059 1.834v6.082c0 0.779 0.422 1.461 1.049 1.828l0.009 0.006 5.281 3.049c0.305 0.178 0.67 0.284 1.061 0.284 0.373 0 0.723-0.098 1.027-0.265l-0.012 0.006 5.080-2.787c0.166-0.091 0.276-0.265 0.276-0.465v-0.716c0-0.293-0.238-0.529-0.529-0.529z" ] []
          ]
      , menuAttrs: oneOf
          [ DA.selfT_ \(elem :: Web.HTMLUListElement) -> do
              Console.log "SelfT"
              setMenuElem elem
              mobserver <- mutationObserver \mutrecs _ -> for_ mutrecs \mutrec -> do
                t <- unsafePartial $ MutationRecord.type_ mutrec
                case t of
                  MutationRecordAttributes -> do
                    tgt <- MutationRecord.target mutrec
                    let nt = unsafePartial $ Node.nodeType tgt
                    Console.grouped "MutationRecordType: MutationRecordAttributes" do
                      Console.debug $ "MutationRecord.target nodeType is " <> show (show nt)
                      Console.debug =<< ("MutationRecord.target nodeValue is " <> _) <<< show <<< show <$> Node.nodeValue tgt
                      Console.debug =<< ("MutationRecord.attributeName is " <> _) <<< show <<< show <$> MutationRecord.attributeName mutrec
                      Console.debug =<< ("MutationRecord.attributeNamespace is " <> _) <<< show <<< show <$> MutationRecord.attributeNamespace mutrec
                      Console.debug =<< ("MutationRecord.oldValue is " <> _) <<< show <<< show <$> MutationRecord.oldValue mutrec
                      case nt of
                        NodeType.ElementNode -> DOMElement.fromNode tgt `for_` \elem -> do
                          Console.debug =<< ("\"class\" attribute value=" <> _) <<< show <$> Element.getAttribute "class" elem
                        nodeType -> Console.debug $ "Invalid nodeType: " <> show nodeType
                    pure unit
                  _ -> Console.log =<< ("Invalid MutationRecordType:" <> _) <<< show <$> MutationRecord.typeString mutrec

              Console.grouped "Element.Extra" do
                attrNames <- ElementExtra.getAttributeNames $ HTMLUList.toElement elem
                Console.debug $ "Element.Extra.getAttributeNames: " <> show (show $ attrNames)
              let node = HTMLUList.toNode elem
              MutationObserver.observe node
                { attributes: true, attributeOldValue: true, attributeFilter: [ "class" ] }
                mobserver
          , DA.klass $ ((menuElem <#> \e t -> e /\ t) <|*> treshold) # dredge \evt -> bindToEffect evt \(uList /\ inTreshold) -> do
              Console.debug $ "inTreshold=" <> show inTreshold
              let elem = HTMLUList.toElement uList
              toks <- DOMElement.classList elem
              if inTreshold then do
                void $ DOMTokenList.remove toks "hidden"
                void $ DOMTokenList.remove toks "flex-col"
              else do
                void $ DOMTokenList.add toks "hidden"
                void $ DOMTokenList.add toks "flex-col"
              Element.className elem
          ]
      , link1Attrs: empty
      --   , link2Attrs: empty
      --   , link3Attrs: empty
      --   , link4Attrs: empty
      , menuBtnAttrs: DL.click $ {- appMenuHidden -}  treshold <#> \ {- hidden -}inTreshold _ -> do
          -- Console.log $ "click start. hidden=" <> show hidden
          Console.log $ "click start. inTreshold=" <> show inTreshold
          let
            getById id = MaybeT $ NonElementParentNode.getElementById id
              =<< (HTMLDocument.toNonElementParentNode <$> _) <<< Window.document
              =<< window
          void $ runMaybeT do
            Console.log "maybe start"
            menuBtn <- getById "menu-btn"
            btnw <- liftEffect $ DOMElement.clientWidth menuBtn
            btny <- liftEffect $ DOMElement.clientTop menuBtn
            elem <- getById "app-menu"
            liftEffect do
              -- DOMElement.setAttribute "left" (show (-btnx)) elem
              w <- DOMElement.clientWidth elem
              y <- DOMElement.clientTop elem
              Console.log $ "x=" <> show w <> ", y=" <> show y
              toks <- DOMElement.classList elem
              -- setMenuStyle <<< (if _ then "" else "left:-" <> show (btnw + w)) =<< 
              void $ DOMTokenList.toggle toks "hidden"
              -- void $ DOMTokenList.toggle toks "-left-20"
              void $ DOMTokenList.toggle toks "flex-col"
              Console.log "Menu Button Click"
      -- , menuBtnAttrs: DL.click $ menuElem <#> \elem _ -> do
      --     Console.log "Hello Button!"
      -- void $ flip DOMTokenList.toggle "hidden" =<< (DOMElement.classList $ HTMLUList.toElement elem)
      }

pursx =
  Proxy
    :: Proxy
         """<header id="page-header" class="p-1 bg-gray-800 text-gray-100">
    <div class="container flex justify-between h-12 mx-auto">
        <a rel="noopener noreferrer" href="#" aria-label="Back to homepage" class="flex items-center p-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 32 32"
                class="w-8 h-8 text-violet-400">
                ~iconPaths~
            </svg>
        </a>
        <div class="flex relative lg:static">
            <ul id="app-menu" class="-left-20 bg-gray-800 bg-opacity-90 text-center border-solid rounded-md border-1 p-2 border-slate-200 hidden absolute flex-col lg:p-0 lg:flex lg:flex-row lg:border-none lg:items-stretch lg:space-x-3 lg:static" ~menuAttrs~>
                <li class="flex">
                    <a rel="noopener noreferrer" href="#"
                        class="flex items-center px-4 -mb-1 border-b-2 border-transparent" ~link1Attrs~>Link 1</a>
                </li>
                <li class="flex">
                    <a rel="noopener noreferrer" href="#"
                        class="flex items-center px-4 -mb-1 border-b-2 border-transparent text-violet-400 border-violet-400">Link 2</a>
                </li>
                <li class="flex">
                    <a rel="noopener noreferrer" href="#"
                        class="flex items-center px-4 -mb-1 border-b-2 border-transparent">Link 3</a>
                </li>
                <li class="flex">
                    <a rel="noopener noreferrer" href="#"
                        class="flex items-center px-4 -mb-1 border-b-2 border-transparent">Link 4</a>
                </li>
            </ul>
            <button id="menu-btn" class="p-4 lg:hidden" ~menuBtnAttrs~>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"
                    class="w-6 h-6 text-gray-100">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16">
                    </path>
                </svg>
            </button>
        </div>
        <div class="items-center flex-shrink-0 hidden lg:flex">
            <button class="px-8 py-3 font-semibold rounded bg-violet-400 text-gray-900">Log in</button>
        </div>
        <!-- <button class="p-4 lg:hidden" ~menuBtnAttrs~>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"
                class="w-5 h-5 text-gray-100">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16">
                </path>
            </svg>
        </button> -->
    </div>
</header>"""

{-
                    <!-- <path
                        d="M27.912 7.289l-10.324-5.961c-0.455-0.268-1.002-0.425-1.588-0.425s-1.133 0.158-1.604 0.433l0.015-0.008-10.324 5.961c-0.955 0.561-1.586 1.582-1.588 2.75v11.922c0.002 1.168 0.635 2.189 1.574 2.742l0.016 0.008 10.322 5.961c0.455 0.267 1.004 0.425 1.59 0.425 0.584 0 1.131-0.158 1.602-0.433l-0.014 0.008 10.322-5.961c0.955-0.561 1.586-1.582 1.588-2.75v-11.922c-0.002-1.168-0.633-2.189-1.573-2.742zM27.383 21.961c0 0.389-0.211 0.73-0.526 0.914l-0.004 0.002-10.324 5.961c-0.152 0.088-0.334 0.142-0.53 0.142s-0.377-0.053-0.535-0.145l0.005 0.002-10.324-5.961c-0.319-0.186-0.529-0.527-0.529-0.916v-11.922c0-0.389 0.211-0.73 0.526-0.914l0.004-0.002 10.324-5.961c0.152-0.090 0.334-0.143 0.53-0.143s0.377 0.053 0.535 0.144l-0.006-0.002 10.324 5.961c0.319 0.185 0.529 0.527 0.529 0.916z">
                    </path>
                    <path
                        d="M22.094 19.451h-0.758c-0.188 0-0.363 0.049-0.515 0.135l0.006-0.004-4.574 2.512-5.282-3.049v-6.082l5.282-3.051 4.576 2.504c0.146 0.082 0.323 0.131 0.508 0.131h0.758c0.293 0 0.529-0.239 0.529-0.531v-0.716c0-0.2-0.11-0.373-0.271-0.463l-0.004-0.002-5.078-2.777c-0.293-0.164-0.645-0.26-1.015-0.26-0.39 0-0.756 0.106-1.070 0.289l0.010-0.006-5.281 3.049c-0.636 0.375-1.056 1.055-1.059 1.834v6.082c0 0.779 0.422 1.461 1.049 1.828l0.009 0.006 5.281 3.049c0.305 0.178 0.67 0.284 1.061 0.284 0.373 0 0.723-0.098 1.027-0.265l-0.012 0.006 5.080-2.787c0.166-0.091 0.276-0.265 0.276-0.465v-0.716c0-0.293-0.238-0.529-0.529-0.529z">
                    </path> -->
-}

